name: Build, Test & Publish

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  matrix-build:
    name: ${{ matrix.job-name }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - job-name: "test-backend"
            task: "backend"
            java-version: "22"
            node-version: "20"
            
          - job-name: "test-frontend"
            task: "frontend"
            java-version: "22"
            node-version: "20"
            
          - job-name: "docker-publish"
            task: "docker"
            java-version: "22"
            node-version: "20"
    
    permissions:
      contents: read
      packages: write
      security-events: write
      checks: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      # Backend Testing Job
      - name: Backend - Validate Code Formatting (Spotless)
        if: matrix.task == 'backend'
        working-directory: ./backend
        run: |
          echo "Validating code formatting with Spotless..."
          mvn spotless:check -B
        env:
          MAVEN_OPTS: "-Xmx2048m"
      
      - name: Backend - Run Tests with Coverage
        if: matrix.task == 'backend'
        working-directory: ./backend
        run: |
          echo "Running backend tests with JaCoCo coverage..."
          mvn clean test jacoco:report -B -Dspring.profiles.active=test
        env:
          MAVEN_OPTS: "-Xmx2048m"
      
      - name: Backend - Verify Coverage Threshold
        if: matrix.task == 'backend'
        working-directory: ./backend
        run: |
          echo "Verifying coverage meets 80% threshold..."
          mvn verify -DskipTests -B
        env:
          MAVEN_OPTS: "-Xmx2048m"
      
      - name: Backend - SonarQube Analysis
        if: matrix.task == 'backend'
        working-directory: ./backend
        run: |
          echo "Running SonarQube analysis..."
          mvn sonar:sonar -B \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=energy-market-visualization \
            -Dsonar.projectKey=energy-market-visualization \
            -Dsonar.qualitygate.wait=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          MAVEN_OPTS: "-Xmx2048m"
      
      # Frontend Testing Job
      - name: Frontend - Install Dependencies
        if: matrix.task == 'frontend'
        working-directory: ./frontend
        run: |
          echo "Installing frontend dependencies..."
          npm install --legacy-peer-deps

      - name: Frontend - TypeScript Type Check
        if: matrix.task == 'frontend'
        working-directory: ./frontend
        run: |
          echo "Running TypeScript type checking..."
          npm run type-check

      - name: Frontend - Code Formatting Check (Prettier)
        if: matrix.task == 'frontend'
        working-directory: ./frontend
        run: |
          echo "Validating code formatting with Prettier..."
          npm run format:check

      - name: Frontend - Lint Code (ESLint)
        if: matrix.task == 'frontend'
        working-directory: ./frontend
        run: |
          echo "Running ESLint with strict rules..."
          npm run lint

      - name: Frontend - Run Tests with Coverage
        if: matrix.task == 'frontend'
        working-directory: ./frontend
        run: |
          echo "Running frontend tests with coverage..."
          npm run test:ci

      - name: Frontend - Build Application
        if: matrix.task == 'frontend'
        working-directory: ./frontend
        run: |
          echo "Building frontend application..."
          npm run build

      # Docker Publishing Job
      - name: Docker - Log in to Container Registry
        if: matrix.task == 'docker'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Docker - Set up Docker Buildx
        if: matrix.task == 'docker'
        uses: docker/setup-buildx-action@v3
      
      - name: Docker - Extract metadata for energy-service
        if: matrix.task == 'docker'
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/energy-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=commit-,suffix=-{{date 'YYYYMMDD-HHmmss'}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
      
      - name: Docker - Extract metadata for energy-viz
        if: matrix.task == 'docker'
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/energy-viz
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=commit-,suffix=-{{date 'YYYYMMDD-HHmmss'}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
      
      - name: Docker - Prepare Backend Dockerfile
        if: matrix.task == 'docker'
        run: |
          echo "Preparing backend Dockerfile..."
          mkdir -p backend
          if [ ! -f "backend/Dockerfile" ]; then
            cat > backend/Dockerfile << 'EOF'
          FROM eclipse-temurin:22-jre-alpine
          
          LABEL org.opencontainers.image.source="https://github.com/${{ github.repository }}"
          LABEL org.opencontainers.image.description="Energy Market Visualization - Backend Service"
          
          RUN addgroup -g 1001 -S appgroup && \
              adduser -S appuser -u 1001 -G appgroup
          
          WORKDIR /app
          
          COPY --chown=appuser:appgroup target/*.jar app.jar
          
          USER appuser
          
          EXPOSE 8080
          
          HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
            CMD wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1
          
          ENTRYPOINT ["java", "-XX:+UseContainerSupport", "-XX:MaxRAMPercentage=75.0", "-jar", "app.jar"]
          EOF
          fi
      
      - name: Docker - Prepare Frontend Dockerfile
        if: matrix.task == 'docker'
        run: |
          echo "Preparing frontend Dockerfile..."
          mkdir -p frontend
          if [ ! -f "frontend/Dockerfile" ]; then
            cat > frontend/Dockerfile << 'EOF'
          # Multi-stage build for frontend
          FROM node:20-alpine as builder
          
          WORKDIR /app
          
          COPY package*.json package-lock.json ./
          RUN npm ci --legacy-peer-deps
          
          COPY . .
          RUN npm run build
          
          # Production stage
          FROM nginx:alpine
          
          LABEL org.opencontainers.image.source="https://github.com/${{ github.repository }}"
          LABEL org.opencontainers.image.description="Energy Market Visualization - Frontend"
          
          RUN addgroup -g 1001 -S appgroup && \
              adduser -S appuser -u 1001 -G appgroup
          
          COPY --from=builder /app/dist /usr/share/nginx/html
          
          COPY nginx.conf /etc/nginx/nginx.conf
          
          RUN chown -R appuser:appgroup /usr/share/nginx/html && \
              chown -R appuser:appgroup /var/cache/nginx && \
              chown -R appuser:appgroup /var/log/nginx && \
              chown -R appuser:appgroup /etc/nginx/conf.d
          
          RUN touch /var/run/nginx.pid && \
              chown -R appuser:appgroup /var/run/nginx.pid
          
          USER appuser
          
          EXPOSE 8080
          
          HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
            CMD wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1
          
          CMD ["nginx", "-g", "daemon off;"]
          EOF
          
            cat > frontend/nginx.conf << 'EOF'
          events {
              worker_connections 1024;
          }
          
          http {
              include       /etc/nginx/mime.types;
              default_type  application/octet-stream;
              
              sendfile        on;
              keepalive_timeout  65;
              gzip on;
              gzip_types text/css application/javascript application/json;
              
              server {
                  listen       8080;
                  server_name  localhost;
                  
                  root   /usr/share/nginx/html;
                  index  index.html index.htm;
                  
                  location / {
                      try_files $uri $uri/ /index.html;
                  }
                  
                  location /api/ {
                      proxy_pass http://energy-service:8080/;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                  }
              }
          }
          EOF
          fi
      
      - name: Backend - Package Application (for Docker)
        if: matrix.task == 'docker'
        working-directory: ./backend
        run: |
          echo "Packaging backend application for Docker..."
          mvn package -DskipTests -B

      - name: Docker - Build and push energy-service
        if: matrix.task == 'docker'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Docker - Build and push energy-viz
        if: matrix.task == 'docker'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      # Security Scanning
      - name: Security - Scan Docker images
        if: matrix.task == 'docker'
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/energy-service:commit-${{ github.sha }}-${{ github.run_id }}
          fail-build: true
          severity-cutoff: 'high'
      
      # Results and Artifacts
      - name: Upload test results
        if: always() && (matrix.task == 'backend' || matrix.task == 'frontend')
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.task }}
          path: |
            **/target/surefire-reports/
            **/coverage/
            **/test-results/
          retention-days: 30
      
      - name: Summary
        if: always()
        run: |
          echo "## Build Summary for ${{ matrix.job-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Java Version**: ${{ matrix.java-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Version**: ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ matrix.task }}" = "docker" ]; then
            echo "- **Docker Images Built**:" >> $GITHUB_STEP_SUMMARY
            echo "  - energy-service:commit-${{ github.sha }}-${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
            echo "  - energy-viz:commit-${{ github.sha }}-${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          fi 